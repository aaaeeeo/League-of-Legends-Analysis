/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.uchicago.mpcs53013.GSD;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-14")
public class Data implements org.apache.thrift.TBase<Data, Data._Fields>, java.io.Serializable, Cloneable, Comparable<Data> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Data");

  private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField("sid", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField YEARMODA_FIELD_DESC = new org.apache.thrift.protocol.TField("YEARMODA", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TEMP_FIELD_DESC = new org.apache.thrift.protocol.TField("TEMP", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField DEWP_FIELD_DESC = new org.apache.thrift.protocol.TField("DEWP", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField SLP_FIELD_DESC = new org.apache.thrift.protocol.TField("SLP", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField TP_FIELD_DESC = new org.apache.thrift.protocol.TField("TP", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField VISIB_FIELD_DESC = new org.apache.thrift.protocol.TField("VISIB", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField WDSP_FIELD_DESC = new org.apache.thrift.protocol.TField("WDSP", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField MXSPD_FIELD_DESC = new org.apache.thrift.protocol.TField("MXSPD", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField GUST_FIELD_DESC = new org.apache.thrift.protocol.TField("GUST", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("MAX", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("MIN", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField PRCP_FIELD_DESC = new org.apache.thrift.protocol.TField("PRCP", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField SNDP_FIELD_DESC = new org.apache.thrift.protocol.TField("SNDP", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField FRSHTT_FIELD_DESC = new org.apache.thrift.protocol.TField("FRSHTT", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DataTupleSchemeFactory());
  }

  public StationID sid; // required
  public String YEARMODA; // optional
  public double TEMP; // optional
  public double DEWP; // optional
  public double SLP; // optional
  public double TP; // optional
  public double VISIB; // optional
  public double WDSP; // optional
  public double MXSPD; // optional
  public double GUST; // optional
  public double MAX; // optional
  public double MIN; // optional
  public double PRCP; // optional
  public double SNDP; // optional
  public String FRSHTT; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SID((short)1, "sid"),
    YEARMODA((short)2, "YEARMODA"),
    TEMP((short)3, "TEMP"),
    DEWP((short)4, "DEWP"),
    SLP((short)5, "SLP"),
    TP((short)6, "TP"),
    VISIB((short)7, "VISIB"),
    WDSP((short)8, "WDSP"),
    MXSPD((short)9, "MXSPD"),
    GUST((short)10, "GUST"),
    MAX((short)11, "MAX"),
    MIN((short)12, "MIN"),
    PRCP((short)13, "PRCP"),
    SNDP((short)14, "SNDP"),
    FRSHTT((short)15, "FRSHTT");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SID
          return SID;
        case 2: // YEARMODA
          return YEARMODA;
        case 3: // TEMP
          return TEMP;
        case 4: // DEWP
          return DEWP;
        case 5: // SLP
          return SLP;
        case 6: // TP
          return TP;
        case 7: // VISIB
          return VISIB;
        case 8: // WDSP
          return WDSP;
        case 9: // MXSPD
          return MXSPD;
        case 10: // GUST
          return GUST;
        case 11: // MAX
          return MAX;
        case 12: // MIN
          return MIN;
        case 13: // PRCP
          return PRCP;
        case 14: // SNDP
          return SNDP;
        case 15: // FRSHTT
          return FRSHTT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TEMP_ISSET_ID = 0;
  private static final int __DEWP_ISSET_ID = 1;
  private static final int __SLP_ISSET_ID = 2;
  private static final int __TP_ISSET_ID = 3;
  private static final int __VISIB_ISSET_ID = 4;
  private static final int __WDSP_ISSET_ID = 5;
  private static final int __MXSPD_ISSET_ID = 6;
  private static final int __GUST_ISSET_ID = 7;
  private static final int __MAX_ISSET_ID = 8;
  private static final int __MIN_ISSET_ID = 9;
  private static final int __PRCP_ISSET_ID = 10;
  private static final int __SNDP_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.YEARMODA,_Fields.TEMP,_Fields.DEWP,_Fields.SLP,_Fields.TP,_Fields.VISIB,_Fields.WDSP,_Fields.MXSPD,_Fields.GUST,_Fields.MAX,_Fields.MIN,_Fields.PRCP,_Fields.SNDP,_Fields.FRSHTT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SID, new org.apache.thrift.meta_data.FieldMetaData("sid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StationID.class)));
    tmpMap.put(_Fields.YEARMODA, new org.apache.thrift.meta_data.FieldMetaData("YEARMODA", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEMP, new org.apache.thrift.meta_data.FieldMetaData("TEMP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEWP, new org.apache.thrift.meta_data.FieldMetaData("DEWP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SLP, new org.apache.thrift.meta_data.FieldMetaData("SLP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TP, new org.apache.thrift.meta_data.FieldMetaData("TP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VISIB, new org.apache.thrift.meta_data.FieldMetaData("VISIB", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.WDSP, new org.apache.thrift.meta_data.FieldMetaData("WDSP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MXSPD, new org.apache.thrift.meta_data.FieldMetaData("MXSPD", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GUST, new org.apache.thrift.meta_data.FieldMetaData("GUST", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX, new org.apache.thrift.meta_data.FieldMetaData("MAX", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MIN, new org.apache.thrift.meta_data.FieldMetaData("MIN", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRCP, new org.apache.thrift.meta_data.FieldMetaData("PRCP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SNDP, new org.apache.thrift.meta_data.FieldMetaData("SNDP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FRSHTT, new org.apache.thrift.meta_data.FieldMetaData("FRSHTT", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Data.class, metaDataMap);
  }

  public Data() {
  }

  public Data(
    StationID sid)
  {
    this();
    this.sid = sid;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Data(Data other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSid()) {
      this.sid = new StationID(other.sid);
    }
    if (other.isSetYEARMODA()) {
      this.YEARMODA = other.YEARMODA;
    }
    this.TEMP = other.TEMP;
    this.DEWP = other.DEWP;
    this.SLP = other.SLP;
    this.TP = other.TP;
    this.VISIB = other.VISIB;
    this.WDSP = other.WDSP;
    this.MXSPD = other.MXSPD;
    this.GUST = other.GUST;
    this.MAX = other.MAX;
    this.MIN = other.MIN;
    this.PRCP = other.PRCP;
    this.SNDP = other.SNDP;
    if (other.isSetFRSHTT()) {
      this.FRSHTT = other.FRSHTT;
    }
  }

  public Data deepCopy() {
    return new Data(this);
  }

  @Override
  public void clear() {
    this.sid = null;
    this.YEARMODA = null;
    setTEMPIsSet(false);
    this.TEMP = 0.0;
    setDEWPIsSet(false);
    this.DEWP = 0.0;
    setSLPIsSet(false);
    this.SLP = 0.0;
    setTPIsSet(false);
    this.TP = 0.0;
    setVISIBIsSet(false);
    this.VISIB = 0.0;
    setWDSPIsSet(false);
    this.WDSP = 0.0;
    setMXSPDIsSet(false);
    this.MXSPD = 0.0;
    setGUSTIsSet(false);
    this.GUST = 0.0;
    setMAXIsSet(false);
    this.MAX = 0.0;
    setMINIsSet(false);
    this.MIN = 0.0;
    setPRCPIsSet(false);
    this.PRCP = 0.0;
    setSNDPIsSet(false);
    this.SNDP = 0.0;
    this.FRSHTT = null;
  }

  public StationID getSid() {
    return this.sid;
  }

  public Data setSid(StationID sid) {
    this.sid = sid;
    return this;
  }

  public void unsetSid() {
    this.sid = null;
  }

  /** Returns true if field sid is set (has been assigned a value) and false otherwise */
  public boolean isSetSid() {
    return this.sid != null;
  }

  public void setSidIsSet(boolean value) {
    if (!value) {
      this.sid = null;
    }
  }

  public String getYEARMODA() {
    return this.YEARMODA;
  }

  public Data setYEARMODA(String YEARMODA) {
    this.YEARMODA = YEARMODA;
    return this;
  }

  public void unsetYEARMODA() {
    this.YEARMODA = null;
  }

  /** Returns true if field YEARMODA is set (has been assigned a value) and false otherwise */
  public boolean isSetYEARMODA() {
    return this.YEARMODA != null;
  }

  public void setYEARMODAIsSet(boolean value) {
    if (!value) {
      this.YEARMODA = null;
    }
  }

  public double getTEMP() {
    return this.TEMP;
  }

  public Data setTEMP(double TEMP) {
    this.TEMP = TEMP;
    setTEMPIsSet(true);
    return this;
  }

  public void unsetTEMP() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEMP_ISSET_ID);
  }

  /** Returns true if field TEMP is set (has been assigned a value) and false otherwise */
  public boolean isSetTEMP() {
    return EncodingUtils.testBit(__isset_bitfield, __TEMP_ISSET_ID);
  }

  public void setTEMPIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEMP_ISSET_ID, value);
  }

  public double getDEWP() {
    return this.DEWP;
  }

  public Data setDEWP(double DEWP) {
    this.DEWP = DEWP;
    setDEWPIsSet(true);
    return this;
  }

  public void unsetDEWP() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEWP_ISSET_ID);
  }

  /** Returns true if field DEWP is set (has been assigned a value) and false otherwise */
  public boolean isSetDEWP() {
    return EncodingUtils.testBit(__isset_bitfield, __DEWP_ISSET_ID);
  }

  public void setDEWPIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEWP_ISSET_ID, value);
  }

  public double getSLP() {
    return this.SLP;
  }

  public Data setSLP(double SLP) {
    this.SLP = SLP;
    setSLPIsSet(true);
    return this;
  }

  public void unsetSLP() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLP_ISSET_ID);
  }

  /** Returns true if field SLP is set (has been assigned a value) and false otherwise */
  public boolean isSetSLP() {
    return EncodingUtils.testBit(__isset_bitfield, __SLP_ISSET_ID);
  }

  public void setSLPIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLP_ISSET_ID, value);
  }

  public double getTP() {
    return this.TP;
  }

  public Data setTP(double TP) {
    this.TP = TP;
    setTPIsSet(true);
    return this;
  }

  public void unsetTP() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TP_ISSET_ID);
  }

  /** Returns true if field TP is set (has been assigned a value) and false otherwise */
  public boolean isSetTP() {
    return EncodingUtils.testBit(__isset_bitfield, __TP_ISSET_ID);
  }

  public void setTPIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TP_ISSET_ID, value);
  }

  public double getVISIB() {
    return this.VISIB;
  }

  public Data setVISIB(double VISIB) {
    this.VISIB = VISIB;
    setVISIBIsSet(true);
    return this;
  }

  public void unsetVISIB() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VISIB_ISSET_ID);
  }

  /** Returns true if field VISIB is set (has been assigned a value) and false otherwise */
  public boolean isSetVISIB() {
    return EncodingUtils.testBit(__isset_bitfield, __VISIB_ISSET_ID);
  }

  public void setVISIBIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VISIB_ISSET_ID, value);
  }

  public double getWDSP() {
    return this.WDSP;
  }

  public Data setWDSP(double WDSP) {
    this.WDSP = WDSP;
    setWDSPIsSet(true);
    return this;
  }

  public void unsetWDSP() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WDSP_ISSET_ID);
  }

  /** Returns true if field WDSP is set (has been assigned a value) and false otherwise */
  public boolean isSetWDSP() {
    return EncodingUtils.testBit(__isset_bitfield, __WDSP_ISSET_ID);
  }

  public void setWDSPIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WDSP_ISSET_ID, value);
  }

  public double getMXSPD() {
    return this.MXSPD;
  }

  public Data setMXSPD(double MXSPD) {
    this.MXSPD = MXSPD;
    setMXSPDIsSet(true);
    return this;
  }

  public void unsetMXSPD() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MXSPD_ISSET_ID);
  }

  /** Returns true if field MXSPD is set (has been assigned a value) and false otherwise */
  public boolean isSetMXSPD() {
    return EncodingUtils.testBit(__isset_bitfield, __MXSPD_ISSET_ID);
  }

  public void setMXSPDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MXSPD_ISSET_ID, value);
  }

  public double getGUST() {
    return this.GUST;
  }

  public Data setGUST(double GUST) {
    this.GUST = GUST;
    setGUSTIsSet(true);
    return this;
  }

  public void unsetGUST() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GUST_ISSET_ID);
  }

  /** Returns true if field GUST is set (has been assigned a value) and false otherwise */
  public boolean isSetGUST() {
    return EncodingUtils.testBit(__isset_bitfield, __GUST_ISSET_ID);
  }

  public void setGUSTIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GUST_ISSET_ID, value);
  }

  public double getMAX() {
    return this.MAX;
  }

  public Data setMAX(double MAX) {
    this.MAX = MAX;
    setMAXIsSet(true);
    return this;
  }

  public void unsetMAX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_ISSET_ID);
  }

  /** Returns true if field MAX is set (has been assigned a value) and false otherwise */
  public boolean isSetMAX() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_ISSET_ID);
  }

  public void setMAXIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_ISSET_ID, value);
  }

  public double getMIN() {
    return this.MIN;
  }

  public Data setMIN(double MIN) {
    this.MIN = MIN;
    setMINIsSet(true);
    return this;
  }

  public void unsetMIN() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_ISSET_ID);
  }

  /** Returns true if field MIN is set (has been assigned a value) and false otherwise */
  public boolean isSetMIN() {
    return EncodingUtils.testBit(__isset_bitfield, __MIN_ISSET_ID);
  }

  public void setMINIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_ISSET_ID, value);
  }

  public double getPRCP() {
    return this.PRCP;
  }

  public Data setPRCP(double PRCP) {
    this.PRCP = PRCP;
    setPRCPIsSet(true);
    return this;
  }

  public void unsetPRCP() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRCP_ISSET_ID);
  }

  /** Returns true if field PRCP is set (has been assigned a value) and false otherwise */
  public boolean isSetPRCP() {
    return EncodingUtils.testBit(__isset_bitfield, __PRCP_ISSET_ID);
  }

  public void setPRCPIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRCP_ISSET_ID, value);
  }

  public double getSNDP() {
    return this.SNDP;
  }

  public Data setSNDP(double SNDP) {
    this.SNDP = SNDP;
    setSNDPIsSet(true);
    return this;
  }

  public void unsetSNDP() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SNDP_ISSET_ID);
  }

  /** Returns true if field SNDP is set (has been assigned a value) and false otherwise */
  public boolean isSetSNDP() {
    return EncodingUtils.testBit(__isset_bitfield, __SNDP_ISSET_ID);
  }

  public void setSNDPIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SNDP_ISSET_ID, value);
  }

  public String getFRSHTT() {
    return this.FRSHTT;
  }

  public Data setFRSHTT(String FRSHTT) {
    this.FRSHTT = FRSHTT;
    return this;
  }

  public void unsetFRSHTT() {
    this.FRSHTT = null;
  }

  /** Returns true if field FRSHTT is set (has been assigned a value) and false otherwise */
  public boolean isSetFRSHTT() {
    return this.FRSHTT != null;
  }

  public void setFRSHTTIsSet(boolean value) {
    if (!value) {
      this.FRSHTT = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SID:
      if (value == null) {
        unsetSid();
      } else {
        setSid((StationID)value);
      }
      break;

    case YEARMODA:
      if (value == null) {
        unsetYEARMODA();
      } else {
        setYEARMODA((String)value);
      }
      break;

    case TEMP:
      if (value == null) {
        unsetTEMP();
      } else {
        setTEMP((Double)value);
      }
      break;

    case DEWP:
      if (value == null) {
        unsetDEWP();
      } else {
        setDEWP((Double)value);
      }
      break;

    case SLP:
      if (value == null) {
        unsetSLP();
      } else {
        setSLP((Double)value);
      }
      break;

    case TP:
      if (value == null) {
        unsetTP();
      } else {
        setTP((Double)value);
      }
      break;

    case VISIB:
      if (value == null) {
        unsetVISIB();
      } else {
        setVISIB((Double)value);
      }
      break;

    case WDSP:
      if (value == null) {
        unsetWDSP();
      } else {
        setWDSP((Double)value);
      }
      break;

    case MXSPD:
      if (value == null) {
        unsetMXSPD();
      } else {
        setMXSPD((Double)value);
      }
      break;

    case GUST:
      if (value == null) {
        unsetGUST();
      } else {
        setGUST((Double)value);
      }
      break;

    case MAX:
      if (value == null) {
        unsetMAX();
      } else {
        setMAX((Double)value);
      }
      break;

    case MIN:
      if (value == null) {
        unsetMIN();
      } else {
        setMIN((Double)value);
      }
      break;

    case PRCP:
      if (value == null) {
        unsetPRCP();
      } else {
        setPRCP((Double)value);
      }
      break;

    case SNDP:
      if (value == null) {
        unsetSNDP();
      } else {
        setSNDP((Double)value);
      }
      break;

    case FRSHTT:
      if (value == null) {
        unsetFRSHTT();
      } else {
        setFRSHTT((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SID:
      return getSid();

    case YEARMODA:
      return getYEARMODA();

    case TEMP:
      return getTEMP();

    case DEWP:
      return getDEWP();

    case SLP:
      return getSLP();

    case TP:
      return getTP();

    case VISIB:
      return getVISIB();

    case WDSP:
      return getWDSP();

    case MXSPD:
      return getMXSPD();

    case GUST:
      return getGUST();

    case MAX:
      return getMAX();

    case MIN:
      return getMIN();

    case PRCP:
      return getPRCP();

    case SNDP:
      return getSNDP();

    case FRSHTT:
      return getFRSHTT();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SID:
      return isSetSid();
    case YEARMODA:
      return isSetYEARMODA();
    case TEMP:
      return isSetTEMP();
    case DEWP:
      return isSetDEWP();
    case SLP:
      return isSetSLP();
    case TP:
      return isSetTP();
    case VISIB:
      return isSetVISIB();
    case WDSP:
      return isSetWDSP();
    case MXSPD:
      return isSetMXSPD();
    case GUST:
      return isSetGUST();
    case MAX:
      return isSetMAX();
    case MIN:
      return isSetMIN();
    case PRCP:
      return isSetPRCP();
    case SNDP:
      return isSetSNDP();
    case FRSHTT:
      return isSetFRSHTT();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Data)
      return this.equals((Data)that);
    return false;
  }

  public boolean equals(Data that) {
    if (that == null)
      return false;

    boolean this_present_sid = true && this.isSetSid();
    boolean that_present_sid = true && that.isSetSid();
    if (this_present_sid || that_present_sid) {
      if (!(this_present_sid && that_present_sid))
        return false;
      if (!this.sid.equals(that.sid))
        return false;
    }

    boolean this_present_YEARMODA = true && this.isSetYEARMODA();
    boolean that_present_YEARMODA = true && that.isSetYEARMODA();
    if (this_present_YEARMODA || that_present_YEARMODA) {
      if (!(this_present_YEARMODA && that_present_YEARMODA))
        return false;
      if (!this.YEARMODA.equals(that.YEARMODA))
        return false;
    }

    boolean this_present_TEMP = true && this.isSetTEMP();
    boolean that_present_TEMP = true && that.isSetTEMP();
    if (this_present_TEMP || that_present_TEMP) {
      if (!(this_present_TEMP && that_present_TEMP))
        return false;
      if (this.TEMP != that.TEMP)
        return false;
    }

    boolean this_present_DEWP = true && this.isSetDEWP();
    boolean that_present_DEWP = true && that.isSetDEWP();
    if (this_present_DEWP || that_present_DEWP) {
      if (!(this_present_DEWP && that_present_DEWP))
        return false;
      if (this.DEWP != that.DEWP)
        return false;
    }

    boolean this_present_SLP = true && this.isSetSLP();
    boolean that_present_SLP = true && that.isSetSLP();
    if (this_present_SLP || that_present_SLP) {
      if (!(this_present_SLP && that_present_SLP))
        return false;
      if (this.SLP != that.SLP)
        return false;
    }

    boolean this_present_TP = true && this.isSetTP();
    boolean that_present_TP = true && that.isSetTP();
    if (this_present_TP || that_present_TP) {
      if (!(this_present_TP && that_present_TP))
        return false;
      if (this.TP != that.TP)
        return false;
    }

    boolean this_present_VISIB = true && this.isSetVISIB();
    boolean that_present_VISIB = true && that.isSetVISIB();
    if (this_present_VISIB || that_present_VISIB) {
      if (!(this_present_VISIB && that_present_VISIB))
        return false;
      if (this.VISIB != that.VISIB)
        return false;
    }

    boolean this_present_WDSP = true && this.isSetWDSP();
    boolean that_present_WDSP = true && that.isSetWDSP();
    if (this_present_WDSP || that_present_WDSP) {
      if (!(this_present_WDSP && that_present_WDSP))
        return false;
      if (this.WDSP != that.WDSP)
        return false;
    }

    boolean this_present_MXSPD = true && this.isSetMXSPD();
    boolean that_present_MXSPD = true && that.isSetMXSPD();
    if (this_present_MXSPD || that_present_MXSPD) {
      if (!(this_present_MXSPD && that_present_MXSPD))
        return false;
      if (this.MXSPD != that.MXSPD)
        return false;
    }

    boolean this_present_GUST = true && this.isSetGUST();
    boolean that_present_GUST = true && that.isSetGUST();
    if (this_present_GUST || that_present_GUST) {
      if (!(this_present_GUST && that_present_GUST))
        return false;
      if (this.GUST != that.GUST)
        return false;
    }

    boolean this_present_MAX = true && this.isSetMAX();
    boolean that_present_MAX = true && that.isSetMAX();
    if (this_present_MAX || that_present_MAX) {
      if (!(this_present_MAX && that_present_MAX))
        return false;
      if (this.MAX != that.MAX)
        return false;
    }

    boolean this_present_MIN = true && this.isSetMIN();
    boolean that_present_MIN = true && that.isSetMIN();
    if (this_present_MIN || that_present_MIN) {
      if (!(this_present_MIN && that_present_MIN))
        return false;
      if (this.MIN != that.MIN)
        return false;
    }

    boolean this_present_PRCP = true && this.isSetPRCP();
    boolean that_present_PRCP = true && that.isSetPRCP();
    if (this_present_PRCP || that_present_PRCP) {
      if (!(this_present_PRCP && that_present_PRCP))
        return false;
      if (this.PRCP != that.PRCP)
        return false;
    }

    boolean this_present_SNDP = true && this.isSetSNDP();
    boolean that_present_SNDP = true && that.isSetSNDP();
    if (this_present_SNDP || that_present_SNDP) {
      if (!(this_present_SNDP && that_present_SNDP))
        return false;
      if (this.SNDP != that.SNDP)
        return false;
    }

    boolean this_present_FRSHTT = true && this.isSetFRSHTT();
    boolean that_present_FRSHTT = true && that.isSetFRSHTT();
    if (this_present_FRSHTT || that_present_FRSHTT) {
      if (!(this_present_FRSHTT && that_present_FRSHTT))
        return false;
      if (!this.FRSHTT.equals(that.FRSHTT))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sid = true && (isSetSid());
    list.add(present_sid);
    if (present_sid)
      list.add(sid);

    boolean present_YEARMODA = true && (isSetYEARMODA());
    list.add(present_YEARMODA);
    if (present_YEARMODA)
      list.add(YEARMODA);

    boolean present_TEMP = true && (isSetTEMP());
    list.add(present_TEMP);
    if (present_TEMP)
      list.add(TEMP);

    boolean present_DEWP = true && (isSetDEWP());
    list.add(present_DEWP);
    if (present_DEWP)
      list.add(DEWP);

    boolean present_SLP = true && (isSetSLP());
    list.add(present_SLP);
    if (present_SLP)
      list.add(SLP);

    boolean present_TP = true && (isSetTP());
    list.add(present_TP);
    if (present_TP)
      list.add(TP);

    boolean present_VISIB = true && (isSetVISIB());
    list.add(present_VISIB);
    if (present_VISIB)
      list.add(VISIB);

    boolean present_WDSP = true && (isSetWDSP());
    list.add(present_WDSP);
    if (present_WDSP)
      list.add(WDSP);

    boolean present_MXSPD = true && (isSetMXSPD());
    list.add(present_MXSPD);
    if (present_MXSPD)
      list.add(MXSPD);

    boolean present_GUST = true && (isSetGUST());
    list.add(present_GUST);
    if (present_GUST)
      list.add(GUST);

    boolean present_MAX = true && (isSetMAX());
    list.add(present_MAX);
    if (present_MAX)
      list.add(MAX);

    boolean present_MIN = true && (isSetMIN());
    list.add(present_MIN);
    if (present_MIN)
      list.add(MIN);

    boolean present_PRCP = true && (isSetPRCP());
    list.add(present_PRCP);
    if (present_PRCP)
      list.add(PRCP);

    boolean present_SNDP = true && (isSetSNDP());
    list.add(present_SNDP);
    if (present_SNDP)
      list.add(SNDP);

    boolean present_FRSHTT = true && (isSetFRSHTT());
    list.add(present_FRSHTT);
    if (present_FRSHTT)
      list.add(FRSHTT);

    return list.hashCode();
  }

  @Override
  public int compareTo(Data other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSid()).compareTo(other.isSetSid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, other.sid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYEARMODA()).compareTo(other.isSetYEARMODA());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYEARMODA()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.YEARMODA, other.YEARMODA);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTEMP()).compareTo(other.isSetTEMP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTEMP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TEMP, other.TEMP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDEWP()).compareTo(other.isSetDEWP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDEWP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DEWP, other.DEWP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSLP()).compareTo(other.isSetSLP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSLP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SLP, other.SLP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTP()).compareTo(other.isSetTP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TP, other.TP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVISIB()).compareTo(other.isSetVISIB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVISIB()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.VISIB, other.VISIB);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWDSP()).compareTo(other.isSetWDSP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWDSP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.WDSP, other.WDSP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMXSPD()).compareTo(other.isSetMXSPD());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMXSPD()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MXSPD, other.MXSPD);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGUST()).compareTo(other.isSetGUST());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGUST()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GUST, other.GUST);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMAX()).compareTo(other.isSetMAX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMAX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MAX, other.MAX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMIN()).compareTo(other.isSetMIN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMIN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MIN, other.MIN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPRCP()).compareTo(other.isSetPRCP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPRCP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PRCP, other.PRCP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSNDP()).compareTo(other.isSetSNDP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSNDP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SNDP, other.SNDP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFRSHTT()).compareTo(other.isSetFRSHTT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFRSHTT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FRSHTT, other.FRSHTT);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Data(");
    boolean first = true;

    sb.append("sid:");
    if (this.sid == null) {
      sb.append("null");
    } else {
      sb.append(this.sid);
    }
    first = false;
    if (isSetYEARMODA()) {
      if (!first) sb.append(", ");
      sb.append("YEARMODA:");
      if (this.YEARMODA == null) {
        sb.append("null");
      } else {
        sb.append(this.YEARMODA);
      }
      first = false;
    }
    if (isSetTEMP()) {
      if (!first) sb.append(", ");
      sb.append("TEMP:");
      sb.append(this.TEMP);
      first = false;
    }
    if (isSetDEWP()) {
      if (!first) sb.append(", ");
      sb.append("DEWP:");
      sb.append(this.DEWP);
      first = false;
    }
    if (isSetSLP()) {
      if (!first) sb.append(", ");
      sb.append("SLP:");
      sb.append(this.SLP);
      first = false;
    }
    if (isSetTP()) {
      if (!first) sb.append(", ");
      sb.append("TP:");
      sb.append(this.TP);
      first = false;
    }
    if (isSetVISIB()) {
      if (!first) sb.append(", ");
      sb.append("VISIB:");
      sb.append(this.VISIB);
      first = false;
    }
    if (isSetWDSP()) {
      if (!first) sb.append(", ");
      sb.append("WDSP:");
      sb.append(this.WDSP);
      first = false;
    }
    if (isSetMXSPD()) {
      if (!first) sb.append(", ");
      sb.append("MXSPD:");
      sb.append(this.MXSPD);
      first = false;
    }
    if (isSetGUST()) {
      if (!first) sb.append(", ");
      sb.append("GUST:");
      sb.append(this.GUST);
      first = false;
    }
    if (isSetMAX()) {
      if (!first) sb.append(", ");
      sb.append("MAX:");
      sb.append(this.MAX);
      first = false;
    }
    if (isSetMIN()) {
      if (!first) sb.append(", ");
      sb.append("MIN:");
      sb.append(this.MIN);
      first = false;
    }
    if (isSetPRCP()) {
      if (!first) sb.append(", ");
      sb.append("PRCP:");
      sb.append(this.PRCP);
      first = false;
    }
    if (isSetSNDP()) {
      if (!first) sb.append(", ");
      sb.append("SNDP:");
      sb.append(this.SNDP);
      first = false;
    }
    if (isSetFRSHTT()) {
      if (!first) sb.append(", ");
      sb.append("FRSHTT:");
      if (this.FRSHTT == null) {
        sb.append("null");
      } else {
        sb.append(this.FRSHTT);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sid' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (sid != null) {
      sid.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataStandardSchemeFactory implements SchemeFactory {
    public DataStandardScheme getScheme() {
      return new DataStandardScheme();
    }
  }

  private static class DataStandardScheme extends StandardScheme<Data> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Data struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sid = new StationID();
              struct.sid.read(iprot);
              struct.setSidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // YEARMODA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.YEARMODA = iprot.readString();
              struct.setYEARMODAIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEMP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.TEMP = iprot.readDouble();
              struct.setTEMPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEWP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.DEWP = iprot.readDouble();
              struct.setDEWPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SLP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.SLP = iprot.readDouble();
              struct.setSLPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.TP = iprot.readDouble();
              struct.setTPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VISIB
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.VISIB = iprot.readDouble();
              struct.setVISIBIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // WDSP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.WDSP = iprot.readDouble();
              struct.setWDSPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MXSPD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.MXSPD = iprot.readDouble();
              struct.setMXSPDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // GUST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.GUST = iprot.readDouble();
              struct.setGUSTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.MAX = iprot.readDouble();
              struct.setMAXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.MIN = iprot.readDouble();
              struct.setMINIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PRCP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.PRCP = iprot.readDouble();
              struct.setPRCPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SNDP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.SNDP = iprot.readDouble();
              struct.setSNDPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // FRSHTT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.FRSHTT = iprot.readString();
              struct.setFRSHTTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Data struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sid != null) {
        oprot.writeFieldBegin(SID_FIELD_DESC);
        struct.sid.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.YEARMODA != null) {
        if (struct.isSetYEARMODA()) {
          oprot.writeFieldBegin(YEARMODA_FIELD_DESC);
          oprot.writeString(struct.YEARMODA);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTEMP()) {
        oprot.writeFieldBegin(TEMP_FIELD_DESC);
        oprot.writeDouble(struct.TEMP);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDEWP()) {
        oprot.writeFieldBegin(DEWP_FIELD_DESC);
        oprot.writeDouble(struct.DEWP);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSLP()) {
        oprot.writeFieldBegin(SLP_FIELD_DESC);
        oprot.writeDouble(struct.SLP);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTP()) {
        oprot.writeFieldBegin(TP_FIELD_DESC);
        oprot.writeDouble(struct.TP);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVISIB()) {
        oprot.writeFieldBegin(VISIB_FIELD_DESC);
        oprot.writeDouble(struct.VISIB);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWDSP()) {
        oprot.writeFieldBegin(WDSP_FIELD_DESC);
        oprot.writeDouble(struct.WDSP);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMXSPD()) {
        oprot.writeFieldBegin(MXSPD_FIELD_DESC);
        oprot.writeDouble(struct.MXSPD);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGUST()) {
        oprot.writeFieldBegin(GUST_FIELD_DESC);
        oprot.writeDouble(struct.GUST);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMAX()) {
        oprot.writeFieldBegin(MAX_FIELD_DESC);
        oprot.writeDouble(struct.MAX);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMIN()) {
        oprot.writeFieldBegin(MIN_FIELD_DESC);
        oprot.writeDouble(struct.MIN);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPRCP()) {
        oprot.writeFieldBegin(PRCP_FIELD_DESC);
        oprot.writeDouble(struct.PRCP);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSNDP()) {
        oprot.writeFieldBegin(SNDP_FIELD_DESC);
        oprot.writeDouble(struct.SNDP);
        oprot.writeFieldEnd();
      }
      if (struct.FRSHTT != null) {
        if (struct.isSetFRSHTT()) {
          oprot.writeFieldBegin(FRSHTT_FIELD_DESC);
          oprot.writeString(struct.FRSHTT);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DataTupleSchemeFactory implements SchemeFactory {
    public DataTupleScheme getScheme() {
      return new DataTupleScheme();
    }
  }

  private static class DataTupleScheme extends TupleScheme<Data> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Data struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.sid.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetYEARMODA()) {
        optionals.set(0);
      }
      if (struct.isSetTEMP()) {
        optionals.set(1);
      }
      if (struct.isSetDEWP()) {
        optionals.set(2);
      }
      if (struct.isSetSLP()) {
        optionals.set(3);
      }
      if (struct.isSetTP()) {
        optionals.set(4);
      }
      if (struct.isSetVISIB()) {
        optionals.set(5);
      }
      if (struct.isSetWDSP()) {
        optionals.set(6);
      }
      if (struct.isSetMXSPD()) {
        optionals.set(7);
      }
      if (struct.isSetGUST()) {
        optionals.set(8);
      }
      if (struct.isSetMAX()) {
        optionals.set(9);
      }
      if (struct.isSetMIN()) {
        optionals.set(10);
      }
      if (struct.isSetPRCP()) {
        optionals.set(11);
      }
      if (struct.isSetSNDP()) {
        optionals.set(12);
      }
      if (struct.isSetFRSHTT()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetYEARMODA()) {
        oprot.writeString(struct.YEARMODA);
      }
      if (struct.isSetTEMP()) {
        oprot.writeDouble(struct.TEMP);
      }
      if (struct.isSetDEWP()) {
        oprot.writeDouble(struct.DEWP);
      }
      if (struct.isSetSLP()) {
        oprot.writeDouble(struct.SLP);
      }
      if (struct.isSetTP()) {
        oprot.writeDouble(struct.TP);
      }
      if (struct.isSetVISIB()) {
        oprot.writeDouble(struct.VISIB);
      }
      if (struct.isSetWDSP()) {
        oprot.writeDouble(struct.WDSP);
      }
      if (struct.isSetMXSPD()) {
        oprot.writeDouble(struct.MXSPD);
      }
      if (struct.isSetGUST()) {
        oprot.writeDouble(struct.GUST);
      }
      if (struct.isSetMAX()) {
        oprot.writeDouble(struct.MAX);
      }
      if (struct.isSetMIN()) {
        oprot.writeDouble(struct.MIN);
      }
      if (struct.isSetPRCP()) {
        oprot.writeDouble(struct.PRCP);
      }
      if (struct.isSetSNDP()) {
        oprot.writeDouble(struct.SNDP);
      }
      if (struct.isSetFRSHTT()) {
        oprot.writeString(struct.FRSHTT);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Data struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sid = new StationID();
      struct.sid.read(iprot);
      struct.setSidIsSet(true);
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.YEARMODA = iprot.readString();
        struct.setYEARMODAIsSet(true);
      }
      if (incoming.get(1)) {
        struct.TEMP = iprot.readDouble();
        struct.setTEMPIsSet(true);
      }
      if (incoming.get(2)) {
        struct.DEWP = iprot.readDouble();
        struct.setDEWPIsSet(true);
      }
      if (incoming.get(3)) {
        struct.SLP = iprot.readDouble();
        struct.setSLPIsSet(true);
      }
      if (incoming.get(4)) {
        struct.TP = iprot.readDouble();
        struct.setTPIsSet(true);
      }
      if (incoming.get(5)) {
        struct.VISIB = iprot.readDouble();
        struct.setVISIBIsSet(true);
      }
      if (incoming.get(6)) {
        struct.WDSP = iprot.readDouble();
        struct.setWDSPIsSet(true);
      }
      if (incoming.get(7)) {
        struct.MXSPD = iprot.readDouble();
        struct.setMXSPDIsSet(true);
      }
      if (incoming.get(8)) {
        struct.GUST = iprot.readDouble();
        struct.setGUSTIsSet(true);
      }
      if (incoming.get(9)) {
        struct.MAX = iprot.readDouble();
        struct.setMAXIsSet(true);
      }
      if (incoming.get(10)) {
        struct.MIN = iprot.readDouble();
        struct.setMINIsSet(true);
      }
      if (incoming.get(11)) {
        struct.PRCP = iprot.readDouble();
        struct.setPRCPIsSet(true);
      }
      if (incoming.get(12)) {
        struct.SNDP = iprot.readDouble();
        struct.setSNDPIsSet(true);
      }
      if (incoming.get(13)) {
        struct.FRSHTT = iprot.readString();
        struct.setFRSHTTIsSet(true);
      }
    }
  }

}

